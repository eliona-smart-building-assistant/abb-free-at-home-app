// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package appdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DatapointAttribute is an object representing the database table.
type DatapointAttribute struct {
	ID            int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	DatapointID   int64  `boil:"datapoint_id" json:"datapoint_id" toml:"datapoint_id" yaml:"datapoint_id"`
	Subtype       string `boil:"subtype" json:"subtype" toml:"subtype" yaml:"subtype"`
	AttributeName string `boil:"attribute_name" json:"attribute_name" toml:"attribute_name" yaml:"attribute_name"`

	R *datapointAttributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L datapointAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DatapointAttributeColumns = struct {
	ID            string
	DatapointID   string
	Subtype       string
	AttributeName string
}{
	ID:            "id",
	DatapointID:   "datapoint_id",
	Subtype:       "subtype",
	AttributeName: "attribute_name",
}

var DatapointAttributeTableColumns = struct {
	ID            string
	DatapointID   string
	Subtype       string
	AttributeName string
}{
	ID:            "datapoint_attribute.id",
	DatapointID:   "datapoint_attribute.datapoint_id",
	Subtype:       "datapoint_attribute.subtype",
	AttributeName: "datapoint_attribute.attribute_name",
}

// Generated where

var DatapointAttributeWhere = struct {
	ID            whereHelperint64
	DatapointID   whereHelperint64
	Subtype       whereHelperstring
	AttributeName whereHelperstring
}{
	ID:            whereHelperint64{field: "\"abb_free_at_home\".\"datapoint_attribute\".\"id\""},
	DatapointID:   whereHelperint64{field: "\"abb_free_at_home\".\"datapoint_attribute\".\"datapoint_id\""},
	Subtype:       whereHelperstring{field: "\"abb_free_at_home\".\"datapoint_attribute\".\"subtype\""},
	AttributeName: whereHelperstring{field: "\"abb_free_at_home\".\"datapoint_attribute\".\"attribute_name\""},
}

// DatapointAttributeRels is where relationship names are stored.
var DatapointAttributeRels = struct {
	Datapoint string
}{
	Datapoint: "Datapoint",
}

// datapointAttributeR is where relationships are stored.
type datapointAttributeR struct {
	Datapoint *Datapoint `boil:"Datapoint" json:"Datapoint" toml:"Datapoint" yaml:"Datapoint"`
}

// NewStruct creates a new relationship struct
func (*datapointAttributeR) NewStruct() *datapointAttributeR {
	return &datapointAttributeR{}
}

func (r *datapointAttributeR) GetDatapoint() *Datapoint {
	if r == nil {
		return nil
	}
	return r.Datapoint
}

// datapointAttributeL is where Load methods for each relationship are stored.
type datapointAttributeL struct{}

var (
	datapointAttributeAllColumns            = []string{"id", "datapoint_id", "subtype", "attribute_name"}
	datapointAttributeColumnsWithoutDefault = []string{"subtype", "attribute_name"}
	datapointAttributeColumnsWithDefault    = []string{"id", "datapoint_id"}
	datapointAttributePrimaryKeyColumns     = []string{"id"}
	datapointAttributeGeneratedColumns      = []string{}
)

type (
	// DatapointAttributeSlice is an alias for a slice of pointers to DatapointAttribute.
	// This should almost always be used instead of []DatapointAttribute.
	DatapointAttributeSlice []*DatapointAttribute
	// DatapointAttributeHook is the signature for custom DatapointAttribute hook methods
	DatapointAttributeHook func(context.Context, boil.ContextExecutor, *DatapointAttribute) error

	datapointAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	datapointAttributeType                 = reflect.TypeOf(&DatapointAttribute{})
	datapointAttributeMapping              = queries.MakeStructMapping(datapointAttributeType)
	datapointAttributePrimaryKeyMapping, _ = queries.BindMapping(datapointAttributeType, datapointAttributeMapping, datapointAttributePrimaryKeyColumns)
	datapointAttributeInsertCacheMut       sync.RWMutex
	datapointAttributeInsertCache          = make(map[string]insertCache)
	datapointAttributeUpdateCacheMut       sync.RWMutex
	datapointAttributeUpdateCache          = make(map[string]updateCache)
	datapointAttributeUpsertCacheMut       sync.RWMutex
	datapointAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var datapointAttributeAfterSelectMu sync.Mutex
var datapointAttributeAfterSelectHooks []DatapointAttributeHook

var datapointAttributeBeforeInsertMu sync.Mutex
var datapointAttributeBeforeInsertHooks []DatapointAttributeHook
var datapointAttributeAfterInsertMu sync.Mutex
var datapointAttributeAfterInsertHooks []DatapointAttributeHook

var datapointAttributeBeforeUpdateMu sync.Mutex
var datapointAttributeBeforeUpdateHooks []DatapointAttributeHook
var datapointAttributeAfterUpdateMu sync.Mutex
var datapointAttributeAfterUpdateHooks []DatapointAttributeHook

var datapointAttributeBeforeDeleteMu sync.Mutex
var datapointAttributeBeforeDeleteHooks []DatapointAttributeHook
var datapointAttributeAfterDeleteMu sync.Mutex
var datapointAttributeAfterDeleteHooks []DatapointAttributeHook

var datapointAttributeBeforeUpsertMu sync.Mutex
var datapointAttributeBeforeUpsertHooks []DatapointAttributeHook
var datapointAttributeAfterUpsertMu sync.Mutex
var datapointAttributeAfterUpsertHooks []DatapointAttributeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DatapointAttribute) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datapointAttributeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DatapointAttribute) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datapointAttributeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DatapointAttribute) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datapointAttributeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DatapointAttribute) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datapointAttributeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DatapointAttribute) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datapointAttributeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DatapointAttribute) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datapointAttributeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DatapointAttribute) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datapointAttributeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DatapointAttribute) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datapointAttributeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DatapointAttribute) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range datapointAttributeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDatapointAttributeHook registers your hook function for all future operations.
func AddDatapointAttributeHook(hookPoint boil.HookPoint, datapointAttributeHook DatapointAttributeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		datapointAttributeAfterSelectMu.Lock()
		datapointAttributeAfterSelectHooks = append(datapointAttributeAfterSelectHooks, datapointAttributeHook)
		datapointAttributeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		datapointAttributeBeforeInsertMu.Lock()
		datapointAttributeBeforeInsertHooks = append(datapointAttributeBeforeInsertHooks, datapointAttributeHook)
		datapointAttributeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		datapointAttributeAfterInsertMu.Lock()
		datapointAttributeAfterInsertHooks = append(datapointAttributeAfterInsertHooks, datapointAttributeHook)
		datapointAttributeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		datapointAttributeBeforeUpdateMu.Lock()
		datapointAttributeBeforeUpdateHooks = append(datapointAttributeBeforeUpdateHooks, datapointAttributeHook)
		datapointAttributeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		datapointAttributeAfterUpdateMu.Lock()
		datapointAttributeAfterUpdateHooks = append(datapointAttributeAfterUpdateHooks, datapointAttributeHook)
		datapointAttributeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		datapointAttributeBeforeDeleteMu.Lock()
		datapointAttributeBeforeDeleteHooks = append(datapointAttributeBeforeDeleteHooks, datapointAttributeHook)
		datapointAttributeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		datapointAttributeAfterDeleteMu.Lock()
		datapointAttributeAfterDeleteHooks = append(datapointAttributeAfterDeleteHooks, datapointAttributeHook)
		datapointAttributeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		datapointAttributeBeforeUpsertMu.Lock()
		datapointAttributeBeforeUpsertHooks = append(datapointAttributeBeforeUpsertHooks, datapointAttributeHook)
		datapointAttributeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		datapointAttributeAfterUpsertMu.Lock()
		datapointAttributeAfterUpsertHooks = append(datapointAttributeAfterUpsertHooks, datapointAttributeHook)
		datapointAttributeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single datapointAttribute record from the query using the global executor.
func (q datapointAttributeQuery) OneG(ctx context.Context) (*DatapointAttribute, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single datapointAttribute record from the query.
func (q datapointAttributeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DatapointAttribute, error) {
	o := &DatapointAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: failed to execute a one query for datapoint_attribute")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all DatapointAttribute records from the query using the global executor.
func (q datapointAttributeQuery) AllG(ctx context.Context) (DatapointAttributeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DatapointAttribute records from the query.
func (q datapointAttributeQuery) All(ctx context.Context, exec boil.ContextExecutor) (DatapointAttributeSlice, error) {
	var o []*DatapointAttribute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "appdb: failed to assign all query results to DatapointAttribute slice")
	}

	if len(datapointAttributeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all DatapointAttribute records in the query using the global executor
func (q datapointAttributeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DatapointAttribute records in the query.
func (q datapointAttributeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to count datapoint_attribute rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q datapointAttributeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q datapointAttributeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "appdb: failed to check if datapoint_attribute exists")
	}

	return count > 0, nil
}

// Datapoint pointed to by the foreign key.
func (o *DatapointAttribute) Datapoint(mods ...qm.QueryMod) datapointQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DatapointID),
	}

	queryMods = append(queryMods, mods...)

	return Datapoints(queryMods...)
}

// LoadDatapoint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (datapointAttributeL) LoadDatapoint(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDatapointAttribute interface{}, mods queries.Applicator) error {
	var slice []*DatapointAttribute
	var object *DatapointAttribute

	if singular {
		var ok bool
		object, ok = maybeDatapointAttribute.(*DatapointAttribute)
		if !ok {
			object = new(DatapointAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDatapointAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDatapointAttribute))
			}
		}
	} else {
		s, ok := maybeDatapointAttribute.(*[]*DatapointAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDatapointAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDatapointAttribute))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &datapointAttributeR{}
		}
		args[object.DatapointID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &datapointAttributeR{}
			}

			args[obj.DatapointID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`abb_free_at_home.datapoint`),
		qm.WhereIn(`abb_free_at_home.datapoint.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Datapoint")
	}

	var resultSlice []*Datapoint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Datapoint")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for datapoint")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for datapoint")
	}

	if len(datapointAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Datapoint = foreign
		if foreign.R == nil {
			foreign.R = &datapointR{}
		}
		foreign.R.DatapointAttributes = append(foreign.R.DatapointAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DatapointID == foreign.ID {
				local.R.Datapoint = foreign
				if foreign.R == nil {
					foreign.R = &datapointR{}
				}
				foreign.R.DatapointAttributes = append(foreign.R.DatapointAttributes, local)
				break
			}
		}
	}

	return nil
}

// SetDatapointG of the datapointAttribute to the related item.
// Sets o.R.Datapoint to related.
// Adds o to related.R.DatapointAttributes.
// Uses the global database handle.
func (o *DatapointAttribute) SetDatapointG(ctx context.Context, insert bool, related *Datapoint) error {
	return o.SetDatapoint(ctx, boil.GetContextDB(), insert, related)
}

// SetDatapoint of the datapointAttribute to the related item.
// Sets o.R.Datapoint to related.
// Adds o to related.R.DatapointAttributes.
func (o *DatapointAttribute) SetDatapoint(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Datapoint) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"abb_free_at_home\".\"datapoint_attribute\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"datapoint_id"}),
		strmangle.WhereClause("\"", "\"", 2, datapointAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DatapointID = related.ID
	if o.R == nil {
		o.R = &datapointAttributeR{
			Datapoint: related,
		}
	} else {
		o.R.Datapoint = related
	}

	if related.R == nil {
		related.R = &datapointR{
			DatapointAttributes: DatapointAttributeSlice{o},
		}
	} else {
		related.R.DatapointAttributes = append(related.R.DatapointAttributes, o)
	}

	return nil
}

// DatapointAttributes retrieves all the records using an executor.
func DatapointAttributes(mods ...qm.QueryMod) datapointAttributeQuery {
	mods = append(mods, qm.From("\"abb_free_at_home\".\"datapoint_attribute\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"abb_free_at_home\".\"datapoint_attribute\".*"})
	}

	return datapointAttributeQuery{q}
}

// FindDatapointAttributeG retrieves a single record by ID.
func FindDatapointAttributeG(ctx context.Context, iD int64, selectCols ...string) (*DatapointAttribute, error) {
	return FindDatapointAttribute(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDatapointAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDatapointAttribute(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*DatapointAttribute, error) {
	datapointAttributeObj := &DatapointAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"abb_free_at_home\".\"datapoint_attribute\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, datapointAttributeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: unable to select from datapoint_attribute")
	}

	if err = datapointAttributeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return datapointAttributeObj, err
	}

	return datapointAttributeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DatapointAttribute) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DatapointAttribute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no datapoint_attribute provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(datapointAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	datapointAttributeInsertCacheMut.RLock()
	cache, cached := datapointAttributeInsertCache[key]
	datapointAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			datapointAttributeAllColumns,
			datapointAttributeColumnsWithDefault,
			datapointAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(datapointAttributeType, datapointAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(datapointAttributeType, datapointAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"abb_free_at_home\".\"datapoint_attribute\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"abb_free_at_home\".\"datapoint_attribute\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "appdb: unable to insert into datapoint_attribute")
	}

	if !cached {
		datapointAttributeInsertCacheMut.Lock()
		datapointAttributeInsertCache[key] = cache
		datapointAttributeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single DatapointAttribute record using the global executor.
// See Update for more documentation.
func (o *DatapointAttribute) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DatapointAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DatapointAttribute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	datapointAttributeUpdateCacheMut.RLock()
	cache, cached := datapointAttributeUpdateCache[key]
	datapointAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			datapointAttributeAllColumns,
			datapointAttributePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("appdb: unable to update datapoint_attribute, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"abb_free_at_home\".\"datapoint_attribute\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, datapointAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(datapointAttributeType, datapointAttributeMapping, append(wl, datapointAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update datapoint_attribute row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by update for datapoint_attribute")
	}

	if !cached {
		datapointAttributeUpdateCacheMut.Lock()
		datapointAttributeUpdateCache[key] = cache
		datapointAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q datapointAttributeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q datapointAttributeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all for datapoint_attribute")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected for datapoint_attribute")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DatapointAttributeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DatapointAttributeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("appdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), datapointAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"abb_free_at_home\".\"datapoint_attribute\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, datapointAttributePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all in datapointAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected all in update all datapointAttribute")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DatapointAttribute) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DatapointAttribute) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("appdb: no datapoint_attribute provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(datapointAttributeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	datapointAttributeUpsertCacheMut.RLock()
	cache, cached := datapointAttributeUpsertCache[key]
	datapointAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			datapointAttributeAllColumns,
			datapointAttributeColumnsWithDefault,
			datapointAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			datapointAttributeAllColumns,
			datapointAttributePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("appdb: unable to upsert datapoint_attribute, could not build update column list")
		}

		ret := strmangle.SetComplement(datapointAttributeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(datapointAttributePrimaryKeyColumns) == 0 {
				return errors.New("appdb: unable to upsert datapoint_attribute, could not build conflict column list")
			}

			conflict = make([]string, len(datapointAttributePrimaryKeyColumns))
			copy(conflict, datapointAttributePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"abb_free_at_home\".\"datapoint_attribute\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(datapointAttributeType, datapointAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(datapointAttributeType, datapointAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "appdb: unable to upsert datapoint_attribute")
	}

	if !cached {
		datapointAttributeUpsertCacheMut.Lock()
		datapointAttributeUpsertCache[key] = cache
		datapointAttributeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single DatapointAttribute record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DatapointAttribute) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DatapointAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DatapointAttribute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("appdb: no DatapointAttribute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), datapointAttributePrimaryKeyMapping)
	sql := "DELETE FROM \"abb_free_at_home\".\"datapoint_attribute\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete from datapoint_attribute")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by delete for datapoint_attribute")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q datapointAttributeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q datapointAttributeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("appdb: no datapointAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from datapoint_attribute")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for datapoint_attribute")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DatapointAttributeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DatapointAttributeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(datapointAttributeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), datapointAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"abb_free_at_home\".\"datapoint_attribute\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, datapointAttributePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from datapointAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for datapoint_attribute")
	}

	if len(datapointAttributeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DatapointAttribute) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: no DatapointAttribute provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DatapointAttribute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDatapointAttribute(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DatapointAttributeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: empty DatapointAttributeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DatapointAttributeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DatapointAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), datapointAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"abb_free_at_home\".\"datapoint_attribute\".* FROM \"abb_free_at_home\".\"datapoint_attribute\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, datapointAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "appdb: unable to reload all in DatapointAttributeSlice")
	}

	*o = slice

	return nil
}

// DatapointAttributeExistsG checks if the DatapointAttribute row exists.
func DatapointAttributeExistsG(ctx context.Context, iD int64) (bool, error) {
	return DatapointAttributeExists(ctx, boil.GetContextDB(), iD)
}

// DatapointAttributeExists checks if the DatapointAttribute row exists.
func DatapointAttributeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"abb_free_at_home\".\"datapoint_attribute\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "appdb: unable to check if datapoint_attribute exists")
	}

	return exists, nil
}

// Exists checks if the DatapointAttribute row exists.
func (o *DatapointAttribute) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DatapointAttributeExists(ctx, exec, o.ID)
}
